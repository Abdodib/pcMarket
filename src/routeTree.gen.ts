/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SupportRouteImport } from './routes/support'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as HomeRouteImport } from './routes/home'
import { Route as BuildRouteImport } from './routes/build'
import { Route as AdminRouteImport } from './routes/admin'

const SupportRoute = SupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const BuildRoute = BuildRouteImport.update({
  id: '/build',
  path: '/build',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRoute
  '/build': typeof BuildRoute
  '/home': typeof HomeRoute
  '/products': typeof ProductsRoute
  '/support': typeof SupportRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRoute
  '/build': typeof BuildRoute
  '/home': typeof HomeRoute
  '/products': typeof ProductsRoute
  '/support': typeof SupportRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin': typeof AdminRoute
  '/build': typeof BuildRoute
  '/home': typeof HomeRoute
  '/products': typeof ProductsRoute
  '/support': typeof SupportRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/admin' | '/build' | '/home' | '/products' | '/support'
  fileRoutesByTo: FileRoutesByTo
  to: '/admin' | '/build' | '/home' | '/products' | '/support'
  id: '__root__' | '/admin' | '/build' | '/home' | '/products' | '/support'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRoute: typeof AdminRoute
  BuildRoute: typeof BuildRoute
  HomeRoute: typeof HomeRoute
  ProductsRoute: typeof ProductsRoute
  SupportRoute: typeof SupportRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/build': {
      id: '/build'
      path: '/build'
      fullPath: '/build'
      preLoaderRoute: typeof BuildRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRoute,
  BuildRoute: BuildRoute,
  HomeRoute: HomeRoute,
  ProductsRoute: ProductsRoute,
  SupportRoute: SupportRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
